/*
Copyright 2022 The OpenVEX Authors
SPDX-License-Identifier: Apache-2.0
*/

package cmd

import (
	"context"
	"errors"
	"fmt"
	"os"

	"github.com/openvex/vexctl/pkg/ctl"
	"github.com/spf13/cobra"
)

type attestOptions struct {
	attach bool
	sign   bool
}

func addAttest(parentCmd *cobra.Command) {
	opts := attestOptions{}
	generateCmd := &cobra.Command{
		Short: fmt.Sprintf("%s attest: generate a VEX  attestation", appname),
		Long: fmt.Sprintf(`%s attest: generate an VEX attestation

The attach subcommand lets users wrap OpenVEX documents in in-toto attestations.
Attestations generated by %s can be signed with sigstore and attached to container
images stored in an OCI registry.

In its simplest form, %s will create an attestation from an OpenVEX file and
write it to stdout:

  %s attest data.vex.json

Without any more arguments, images defined as products in the VEX statements,
will be read by %s and transferred to the attestation's subjects when required.
If the products are purls of type oci:, they will be converted to image
references as is customery in the sigstore tooling. For example:

If a product identified by the following purl is found in a statement:

  pkg:oci/kube-apiserver?repository_url=registry.k8s.io&tag=v1.26.0

It will be transferred to the attestation subjects as:

  registry.k8s.io/kube-apiserver:v1.26.0

Any purls and image references not specifying a digest will trigger a network
lookup to read the image digest from the registry.

Please note that purls of types other than oci: and other strings which are not
valid image references will not included in the attestation. 

Signing Attestations
--------------------

Passing the --sign flag will trigger the cosign signing flow, either asking for
credentials from the user or trying to get them from the environment:

  %s attest --sign data.vex.json

When signing an attestation, the standard sigstore signing flow will be defined
if credentials are not found in the environment. Refer to the sigstore
documentation for details.

Attaching Attestations
----------------------

The --attach flag will attach the attestation to the OCI registry of all attested
images. It will use the credentials in the user's environment to authenticate,
this means that if you can write to the registry, attaching should work.

--attach always implies --sign as sigstore does not support attaching unsigned
images.

Specifying Images to Attest
---------------------------

If any further positional arguments are defined, they will be interpreted as
products/image references. %s will generate and attach (if applicable) the
attestation only for those images, skpping any other products found in the
VEX document. 

For example, the following invocation will only attest and attach vex.json
to user/test, even if the OpenVEX document has entries for other images:

%s attest --attach vex.json user/test


`, appname, appname, appname, appname, appname, appname, appname, appname),
		Use:               "attest",
		SilenceUsage:      false,
		SilenceErrors:     false,
		PersistentPreRunE: initLogging,
		RunE: func(cmd *cobra.Command, args []string) error {
			if len(args) == 0 {
				return errors.New("not enough arguments")
			}
			cmd.SilenceUsage = true

			ctx := context.Background()

			vexctl := ctl.New()
			vexctl.Options.Sign = opts.sign

			attestation, err := vexctl.Attest(args[0], args[1:])
			if err != nil {
				return fmt.Errorf("generating attestation: %w", err)
			}

			if opts.attach {
				if err := vexctl.Attach(ctx, attestation); err != nil {
					return fmt.Errorf("attaching attestation: %w", err)
				}
			}

			if err := attestation.ToJSON(os.Stdout); err != nil {
				return fmt.Errorf("marshaling attestation to json")
			}

			return nil
		},
	}

	generateCmd.PersistentFlags().BoolVarP(
		&opts.attach,
		"attach",
		"a",
		false,
		"attach the generated attestation to an image",
	)

	generateCmd.PersistentFlags().BoolVarP(
		&opts.sign,
		"sign",
		"s",
		false,
		"sign the attestation with sigstore",
	)

	parentCmd.AddCommand(generateCmd)
}
