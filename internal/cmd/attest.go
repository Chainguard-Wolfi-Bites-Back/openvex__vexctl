/*
Copyright 2022 The OpenVEX Authors
SPDX-License-Identifier: Apache-2.0
*/

package cmd

import (
	"context"
	"errors"
	"fmt"
	"os"

	"github.com/openvex/vexctl/pkg/ctl"
	"github.com/spf13/cobra"
)

type attestOptions struct {
	attach bool
	sign   bool
}

func addAttest(parentCmd *cobra.Command) {
	opts := attestOptions{}
	generateCmd := &cobra.Command{
		Short: fmt.Sprintf("%s attest: generate a VEX  attestation", appname),
		Long: fmt.Sprintf(`%s attest: generate an VEX attestation
The attach subcommand lets users wrap OpenVEX documents in in-toto attestations.
Attestations generated by %s can be signed with sigstore and attached to container
images stored in an OCI registry.

In its simplest form, %s will create an attestation from an OpenVEX file and
write it to stdout:

  %s attest data.vex.json

If the vex document defines any subjects, %s will read the product entries from
the document and transfer them to the attestation's subjects section (see the
in-toto documentation for more info). 

Passing the --sign flag will trigger the cosign signing flow, either asking for
credentials from the user or trying to get them from the environment:

  %s attest --sign data.vex.json

Further positional arguments are considered to be container images and will be
added to the attestation as subjects


`, appname, appname, appname, appname, appname, appname),
		Use:               "attest",
		SilenceUsage:      false,
		SilenceErrors:     false,
		PersistentPreRunE: initLogging,
		RunE: func(cmd *cobra.Command, args []string) error {
			if len(args) == 0 {
				return errors.New("not enough arguments")
			}
			cmd.SilenceUsage = true

			ctx := context.Background()

			vexctl := ctl.New()
			vexctl.Options.Sign = opts.sign

			attestation, err := vexctl.Attest(args[0], args[1:])
			if err != nil {
				return fmt.Errorf("generating attestation: %w", err)
			}

			if opts.attach {
				if err := vexctl.Attach(ctx, attestation); err != nil {
					return fmt.Errorf("attaching attestation: %w", err)
				}
			}

			if err := attestation.ToJSON(os.Stdout); err != nil {
				return fmt.Errorf("marshaling attestation to json")
			}

			return nil
		},
	}

	generateCmd.PersistentFlags().BoolVarP(
		&opts.attach,
		"attach",
		"a",
		false,
		"attach the generated attestation to an image",
	)

	generateCmd.PersistentFlags().BoolVarP(
		&opts.sign,
		"sign",
		"s",
		false,
		"sign the attestation with sigstore",
	)

	parentCmd.AddCommand(generateCmd)
}
